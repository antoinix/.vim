"                      --Only For Centos
"                     --$HOME/.vim/vimrc
"                          --Antoine Lee
"                   --Mon Aug 3 CST 2020
"     --https://github.com/antoinix/.vim


" ===
" === Vim Plugins
" ===
if !empty(glob('~/.vim/autoload/plug.vim'))
    if empty(glob('~/.vim/plugged'))
        augroup mine | autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
    endif
endif


" ===
" === Clear Junk Files
" ===
"== clear fucking .viminf*.tmp files
if !empty(glob('~/.viminfo.tmp'))
    augroup mine | autocmd VimEnter * silent :!rm ~/.viminf*.tmp
endif

"== clear strange 'selected'
if !empty(glob('$PWD/selected'))
    augroup mine | autocmd VimEnter * silent :!rm $PWD/selected
endif


" ===
" === System Type
" ===
" IsWin, IsMac and IsUni are used in dictionary.vim
let g:IsWin = 0
let g:IsMac = 0
let g:IsUni = 0   " Unix or Linux
if(has('win32') || has('win64') || has('win95') || has('win16'))
    let g:IsWin = 1
else
    if has('mac')
        let g:IsMac = 1
    else
        let g:IsUni = 1
    endif
endif


" ===
" === Vim's Compatibility
" ===
set nocompatible


" ===
" === Time
" ===
set updatetime=500
set timeoutlen=500


" ===
" === Auto-Saving
" ===
set autowrite
set autoread
augroup mine | autocmd FocusLost * :wa


" ===
" === Leader Key
" ===
let mapleader=' '


" ===
" === Remote vimrc
" ===
map <LEADER><LEADER> :w<CR>:e ~/.vim/vimrc<CR>
map <LEADER>r :w<CR>:source ~/.vim/vimrc<CR>


" ===
" === Encoding
" ===
set encoding=utf-8
set langmenu=en_US.UTF-8


" ===
" === Filetype
" ===
filetype on
filetype indent on
filetype plugin on
filetype plugin indent on
augroup mine | autocmd BufRead,BufNewFile *.m   set filetype=m
augroup mine | autocmd BufRead,BufNewFile *.srt set filetype=srt
augroup mine | autocmd BufRead,BufNewFile *.ass set filetype=ass


" ===
" === Searching
" ===
set hlsearch
set incsearch
set ignorecase
set smartcase
exec 'nohlsearch'
noremap <LEADER><CR> :nohlsearch<CR>


" ===
" === Syntax
" ===
syntax on
syntax enable
set list
set textwidth=80
set tabstop=4
set expandtab
set autoindent
set shiftwidth=4
set softtabstop=4
set listchars=tab:‚ñ∂\ ,trail:‚óè


" ===
" === Split
" ===
" <c-w>+j/k : move focus vertically
" <c-w>+h/l : move focus horizontally
" <c-w>+s/v : split the window horizontally/vertically
set splitright
set splitbelow
nnoremap q\ :vs<CR>
nnoremap q- :sp<CR>
nnoremap t- :ter<CR>
nnoremap t\ :vert term<CR>
nnoremap qj <c-w>j
nnoremap qk <c-w>k
nnoremap qh <c-w>h
nnoremap ql <c-w>l
nnoremap qc <c-w>c
nnoremap . <c-w>><c-w>><c-w>>
nnoremap , <c-w><<c-w><<c-w><
nnoremap = <c-w>+<c-w>+<c-w>+
nnoremap - <c-w>-<c-w>-<c-w>-
nnoremap + <c-w>=


" ===
" === Cursor
" ===
set cursorline


" ===
" === Commandline
" ===
set number
set relativenumber
set wrap
set scrolloff=3
set ruler
set cmdheight=1


" ===
" === Status Bar
" ===
set laststatus=2
set autochdir
set formatoptions-=tc
set showcmd
set showmode
set wildmenu
set wildignore=log/**,node_modules/**,target/**,tmp/**,*.rbc
set wildmode=longest,list,full


" ===
" === swap file
" ===
set nobackup
set nowritebackup
set noswapfile


" ===
" === CompileRunGcc
" ===
map <F5> :call CompileRunGcc()<CR>
func! CompileRunGcc()
  exec 'w'
  if &filetype ==# 'sh'
    silent! exec '!clear'
    :!time bash %
  elseif &filetype ==# 'c'
    silent! exec '!clear'
    exec '!g++ % -o %<'
    exec '!time ./%<'
  elseif &filetype ==# 'cpp'
    silent! exec '!clear'
    exec '!g++ % -o %<'
    exec '!time ./%<'
  elseif &filetype ==# 'python'
    silent! exec '!clear'
    exec '!time python3 %'
  endif
endfunc


" ===
" === Vim Plugins
" ===
call plug#begin('~/.vim/plugged')

"== Vim Appearance
" gruvbox vim theme
Plug 'morhetz/gruvbox'

" vim status bar dress<x02>
Plug 'vim-airline/vim-airline'

" as you see...<x03>
Plug 'vim-airline/vim-airline-themes'


"== Convenient Operation
" v6im bookmarks<x05>
Plug 'MattesGroeger/vim-bookmarks'

" vim home page<x06>
Plug 'mhinz/vim-startify'

" multiple cursors<x08>
Plug 'terryma/vim-multiple-cursors'

" Quick choose<x09>
Plug 'gcmt/wildfire.vim'

" Code snippet<x0A>
Plug 'SirVer/ultisnips'

" file superlink in vim<x19>
Plug 'amix/open_file_under_cursor.vim'

" quoting processing<x1F>
Plug 'tpope/vim-surround'


"== Visual Helper
" cursor underline<x0B>
Plug 'itchyny/vim-cursorword'

" highliht some words you like<x0C>
Plug 'lfv89/vim-interestingwords'

" Indent line<x0E>
Plug 'Yggdroot/indentLine'

" C & C++ highlight<x0F>
Plug 'bfrg/vim-cpp-modern'

" Colorful Brackets<x1A>
Plug 'frazrepo/vim-rainbow'


"== Neatness Enhancement
" buffer close enhancement<x11>
Plug 'moll/vim-bbye'


"== Code Helper(completion & autoformat & errorcheck & navigation)
" python autoformat<x13>
Plug 'Chiel92/vim-autoformat'

" error check (python)<x14>
Plug 'dense-analysis/ale'

call plug#end()


" ===
" === Keys For Custom Shortcuts (Made by Antoine Lee)
" ===
" Because of the nesessary delay of shortcut, if you wanna keep working fluently on vim:

" ‚û§  1. a(append), i(insert), o(new line), r(replace), v(visual), s(swap)
"   are not suitable to be the first character of custom shortcut.

" ‚û§  2. p(paste), y(yank), f(find), d(delete), x(cross)
"   are not suitable to be the first character of custom shortcut.

" ‚û§  3. b(backward), w(forward), h(left), l(right), j(down), k(up), n(next)
"   are not suitable to be the first character of shortcut.

" ‚û§  4. /(command) and .(delete) are not suitable too

" ‚û§  5. z m q t g are awesome to be the head of shortcut

" ‚û§  6. [ ] ; ' \ , are better than ? <Space>

" ‚û§  7. c(change) can be the head of shortcut but be attention to 'ci*','cw*'...


" ===
" === vim-interestingwords<x0C>
" ===
let g:interestingWordsRandomiseColors = 1
let g:interestingWordsGUIColors = ['#8CCBEA', '#A4E57E', '#FFDB72', '#FF7272', '#FFB3FF', '#9999FF']
nnoremap <silent> <leader>k :call InterestingWords('n')<CR>
nnoremap <silent> <leader>a :call UncolorAllWords()<CR>
nnoremap <silent> n :call WordNavigation('forward')<CR>
nnoremap <silent> N :call WordNavigation('backward')<CR>


" ===
" === vim-bookmarks<x05>
" ===
let g:bookmark_sign = '‚öë'
let g:bookmark_annotation_sign = 'Óòí'
let g:bookmark_auto_save = 1
let g:bookmark_highlight_lines = 1
let g:bookmark_save_per_working_dir = 1
let g:bookmark_no_default_key_mappings = 1
function! BookmarkMapKeys()
  nnoremap mm :BookmarkToggle<CR>
  nnoremap mi :BookmarkAnnotate<CR>
  nnoremap mn :BookmarkNext<CR>
  nnoremap mp :BookmarkPrev<CR>
  nnoremap ma :BookmarkShowAll<CR>
  nnoremap mc :BookmarkClear<CR>
  nnoremap mx :BookmarkClearAll<CR>
  nnoremap mkk :BookmarkMoveUp
  nnoremap mjj :BookmarkMoveDown
endfunction
function! BookmarkUnmapKeys()
  unmap mm
  unmap mi
  unmap mn
  unmap mp
  unmap ma
  unmap mc
  unmap mx
  unmap mkk
  unmap mjj
endfunction
augroup mine | autocmd BufEnter * :call BookmarkMapKeys()
augroup mine | autocmd BufEnter NERD_tree_* :call BookmarkUnmapKeys()


" ===
" === vim-airline<x02>
" ===
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline#extensions#tabline#formatter = 'default'
let g:airline_powerline_fonts = 1
noremap <c-j> :bp<CR>
noremap <c-J> :bn<CR>
noremap qq :Bdelete<CR>


" ===
" === vim-airline-themes<x03>
" ===
augroup mine | autocmd VimEnter * AirlineTheme dark
let g:lightline = {
      \     'active': {
      \     'left': [['mode', 'paste' ], ['readonly', 'filename', 'modified']],
      \     'right': [['lineinfo'], ['percent'], ['fileformat', 'fileencoding']]
      \     }
      \ }


" ===
" === indentLine<x0E>
" ===
let g:indentLine_color_gui = '#ED6824'
let g:indentLine_char_list = ['¬¶', '‚îÜ', '‚îä','‚ïè','‚îá','‚îã','‚îÇ','‚îÉ','‚ïë']


" ===
" === startify<x06>
" ===
" :h startify      : look into the documentation
" :h startify-faq  : look FAQ about it


" ===
" === vim-rainbow<x1A>
" ===
augroup mine | autocmd FileType * call rainbow#load()
let g:rainbow_active = 1
let g:rainbow_load_separately = [
      \ [ '*' , [['(', ')'], ['\[', '\]'], ['{', '}']] ],
      \ [ '*.tex' , [['(', ')'], ['\[', '\]']] ],
      \ [ '*.cpp' , [['(', ')'], ['\[', '\]'], ['{', '}']] ],
      \ [ '*.{html,htm}' , [['(', ')'], ['\[', '\]'], ['{', '}'], ['<\a[^>]*>', '</[^>]*>']] ],
      \ ]
let g:rainbow_guifgs = ['RoyalBlue3', 'DarkOrange3', 'DarkOrchid3', 'FireBrick']
let g:rainbow_ctermfgs = ['lightblue', 'lightgreen', 'yellow', 'red', 'magenta']


" ===
" === ultisnips<x0A>
" ===
" Insert Mode / all files
let g:UltiSnipsExpandTrigger=';q'
let g:UltiSnipsJumpForwardTrigger=';w'
let g:UltiSnipsJumpBackwardTrigger=';e'


" ===
" === wildfire.vim<x09>
" ===
map <leader>n <Plug>(wildfire-fuel)
map <leader>m <Plug>(wildfire-water)
let g:wildfire_objects = {
      \'*' : ["i'", 'i"', 'i)', 'i]', 'i}', 'ip', 'it','i>'],
      \'html,xml' : ['at','it'],
      \}


" ===
" === vim-autoformat<x13>
" ===
" ‚û§  After installation, you need to do:
" c  : astyle
" cpp: astyle
" python: autopep8 (pip3 is recommended)
noremap <c-d> :Autoformat<CR>:w<CR>
let g:autoformat_autoindent = 0
let g:autoformat_retab = 0
let g:autoformat_remove_trailing_spaces = 0
let g:formatters_python = ['autopep8']
let g:formatterpath = ['/root/.vim/astyle/build/gcc/bin']


" ===
" === ale<x14>
" ===
" ‚û§  After installation, you need to do:
" vim   : vint (pip3 is recommended)
" c     : gcc (pacman is recommended)
" cpp   : gcc (pacman is recommended)
" html  : proselint (pip3 is recommended)
" xhtml : proselint (pip3 is recommended)
" css   : prettier (pacman is recommended)
" shell : shellcheck (pacman is recommended)
" python: pylint & autopep8 & yapf (pip3 is recommended)
" awk   : gawk (https://mirrors.tuna.tsinghua.edu.cn/gnu/gawk)
let g:ale_sign_error = '‚û§ '
let g:ale_sign_warning = '¬ª¬ª'
let g:ale_echo_msg_error_str = '‚ò† Ë¨¨'
let g:ale_echo_msg_warning_str = 'üí£ÊÆÜ'
let g:ale_echo_msg_format = 'üîç%linter% %severity% üìã:%s'
let b:ale_linters = {
      \'asm': [],
      \'c': ['gcc'],
      \'vimwiki': [],
      \'cpp': ['gcc'],
      \'vim': ['vint'],
      \'awk': ['gawk'],
      \'css': ['prettier'],
      \'sh': ['shellcheck'],
      \'python': ['pylint'],
      \'xhtml': ['proselint'],
      \'html': ['proselint','prettier'],
      \}
let b:ale_fixers = {
      \'*': ['remove_trailing_lines', 'trim_whitespace'],
      \'python': ['autopep8', 'yapf'],
      \}
let g:ale_fix_on_save = 1
let g:ale_lint_on_insert_changed = 0
let g:ale_lint_on_text_changed = 'never'


" ==
" == vim-multiple-cursors<x08>
" ==
let g:multi_cursor_use_default_mapping = 0
let g:multi_cursor_start_word_key      = '<c-k>'
let g:multi_cursor_next_key            = '<c-n>'
let g:multi_cursor_prev_key            = '<c-l>'
let g:multi_cursor_skip_key            = '<c-x>'
let g:multi_cursor_quit_key            = '<Esc>'


" ===
" === vim-cpp-modern
" ===
let c_no_curly_error = 1
let g:cpp_posix_standard = 1
let g:cpp_simple_highlight = 0
let g:cpp_concepts_highlight = 1
let g:cpp_class_decl_highlight = 1
let g:cpp_no_function_highlight = 0
let g:cpp_class_scope_highlight = 1
let g:cpp_member_variable_highlight = 1
let g:cpp_named_requirements_highlight = 1
let g:cpp_experimental_template_highlight = 1
let g:cpp_experimental_simple_template_highlight = 1


" ===
" === vim-surround<x1F>
" ===
" ds[sign]           : delete the surrounded signs
" cs[sign_a][sign_b] : change the surrounded signs to another one
" cst[]              :
" ysiw[sign]         : add the surrounded signs for the current word
" yss[sign]          : add the surrounded signs for the current line


" ===
" === gruvbox
" ===
colorscheme gruvbox
set background=dark
" Transparent:
" highlight Normal guibg=NONE ctermbg=None


" ===
" === File Header
" ===
func FileHeader()
"== sh
  if &filetype == 'sh'
    call setline(1,'#! /bin/bash')
  endif

"== python
  if &filetype == 'python'
    call setline(1,"''''''")
  endif
endfunc

autocmd BufNewFile * exec ":call FileHeader()"


" ===
" === Source
" ===
"== shortcut
source ~/.vim/shortcut.vim

"== dictionary
source ~/.vim/dictionary.vim

"== information
source ~/.vim/information.vim
