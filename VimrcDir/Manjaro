"                     --Only For Manjaro
"                     --$HOME/.vim/vimrc
"                          --Antoine Lee
"                   --Mon Feb 3 CST 2020
"     --https://github.com/antoinix/.vim


" ===
" === Vim Plugins
" ===
" run PlugInstall to install plugins on the first use
if !empty(glob('~/.vim/autoload/plug.vim'))
    if empty(glob('~/.vim/plugged'))
        augroup mine | autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
    endif
endif


" ===
" === Clean Junk Files
" ===
" clean fucking .viminf*.tmp files
if !empty(glob('~/.viminfo.tmp'))
    augroup mine | autocmd VimEnter * silent :!rm ~/.viminf*.tmp
endif

" clean intermediate files
if !empty(glob('$PWD/*.log'))
    augroup mine | autocmd VimEnter * silent :!rm $PWD/*.log $PWD/*.aux
endif


" ===
" === Basic Setting
" ===
set encoding=utf-8

set langmenu=en_US.UTF-8

set nocompatible

set updatetime=1000

set timeoutlen=500

set autowrite

set autoread

set list

set textwidth=80

set tabstop=4

set expandtab

set autoindent

set shiftwidth=4

set softtabstop=4

set listchars=tab:▶\ ,trail:●

set cursorline

set number

set relativenumber

set wrap

set scrolloff=3

set ruler

set cmdheight=1

set laststatus=2

set autochdir

set formatoptions-=tc

set showcmd

set showmode

set wildmenu

set wildignore=log/**,node_modules/**,target/**,tmp/**,*.rbc

set wildmode=longest,list,full

set nobackup

set nowritebackup

set noswapfile

let mapleader=' '

let &t_SR = "\<Esc>]50;CursorShape=2\x7"

let &t_EI = "\<Esc>]50;CursorShape=0\x7"

syntax on

syntax enable

augroup mine | autocmd FocusLost * :wa

map <LEADER><LEADER> :w<CR>:e ~/.vim/vimrc<CR>

map <LEADER>r :w<CR>:source ~/.vim/vimrc<CR>

autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif


" ===
" === Searching
" ===
set hlsearch
set incsearch
set ignorecase
set smartcase
exec 'nohlsearch'
noremap <LEADER><CR> :nohlsearch<CR>


" ===
" === Window Spliting
" ===
set splitright
set splitbelow
nnoremap q\ :vs<CR>
nnoremap q- :sp<CR>
nnoremap t- :ter<CR>
nnoremap t\ :vert term<CR>
tnoremap <c-[> <c-w>:ter<CR>
tnoremap <c-\> <c-w>:vert term<CR>
nnoremap qj <c-w>j
nnoremap qk <c-w>k
nnoremap qh <c-w>h
nnoremap ql <c-w>l
nnoremap qc <c-w>c
nnoremap > <c-w>><c-w>><c-w>>
nnoremap < <c-w><<c-w><<c-w><
nnoremap = <c-w>+<c-w>+<c-w>+
nnoremap - <c-w>-<c-w>-<c-w>-
nnoremap + <c-w>=


" ===
" === FileType
" ===
filetype on
filetype indent on
filetype plugin on
filetype plugin indent on
augroup mine | autocmd BufRead,BufNewFile *.m   set filetype=m
augroup mine | autocmd BufRead,BufNewFile *.srt set filetype=srt
augroup mine | autocmd BufRead,BufNewFile *.ass set filetype=ass
augroup mine | autocmd BufRead,BufNewFile *.eif set filetype=eif
augroup mine | autocmd BufRead,BufNewFile *.tex set filetype=tex


" ===
" === CompileRunGcc
" ===
map <F5> :call CompileRunGcc()<CR>
func! CompileRunGcc()
  exec 'w'
  if &filetype ==# 'sh'
    silent! exec '!clear'
    :!time bash %
  elseif &filetype ==# 'c'
    silent! exec '!clear'
    exec '!g++ % -o %<'
    exec '!time ./%<'
  elseif &filetype ==# 'cpp'
    silent! exec '!clear'
    exec '!g++ % -o %<'
    exec '!time ./%<'
  elseif &filetype ==# 'python'
    silent! exec '!clear'
    exec '!time python3 %'
  elseif &filetype ==# 'perl'
    silent! exec '!clear'
    exec '!time perl %'
  elseif &filetype ==# 'html'
    exec '!chromium % &'
  elseif &filetype ==# 'markdown'
    exec 'MarkdownPreview'
  elseif &filetype ==# 'vimwiki'
    exec 'MarkdownPreview'
  elseif &filetype ==# 'tex'
    exec 'LLPStartPreview'
  endif
endfunc


" ===
" === Vim Plugins
" ===
call plug#begin('~/.vim/plugged')

" gruvbox vim theme
Plug 'morhetz/gruvbox'

" vim status bar dress<x02>
Plug 'vim-airline/vim-airline'

" as you see...<x03>
Plug 'vim-airline/vim-airline-themes'

" finder in vim<x04>
Plug 'kien/ctrlp.vim'

" v6im bookmarks<x05>
Plug 'MattesGroeger/vim-bookmarks'

" vim home page<x06>
Plug 'mhinz/vim-startify'

" file tree in vim<x07>
Plug 'preservim/nerdtree'

" multiple cursors<x08>
Plug 'terryma/vim-multiple-cursors'

" Quick choose<x09>
Plug 'gcmt/wildfire.vim'

" Code snippet<x0A>
Plug 'SirVer/ultisnips'

" View Git status quickly<x18>
Plug 'tpope/vim-fugitive'

" file superlink in vim<x19>
Plug 'amix/open_file_under_cursor.vim'

" code finder<x1D>
Plug 'mileszs/ack.vim'

" text alignment<x1E>
Plug 'godlygeek/tabular'

" quoting processing<x1F>
Plug 'tpope/vim-surround'

" cursor underline<x0B>
Plug 'itchyny/vim-cursorword'

" highliht some words you like<x0C>
Plug 'lfv89/vim-interestingwords'

" Status in Git tree<x0D>
Plug 'Xuyuanp/nerdtree-git-plugin'

" Indent line<x0E>
Plug 'Yggdroot/indentLine'

" C & C++ highlight<x0F>
Plug 'bfrg/vim-cpp-modern'

" show Git status in side column<x17>
Plug 'airblade/vim-gitgutter'

" Colorful Brackets<x1A>
Plug 'frazrepo/vim-rainbow'

" key mapping manager<x10>
Plug 'liuchengxu/vim-which-key'

" buffer close enhancement<x11>
Plug 'moll/vim-bbye'

" python autoformat<x13>
Plug 'Chiel92/vim-autoformat'

" error check (python)<x14>
Plug 'dense-analysis/ale'

" coc.nvim
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" Ctags<x18>
Plug 'universal-ctags/ctags'

" Tag bar<x1C>
Plug 'majutsushi/tagbar'

"markdown preview<x15>
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() } }

" wiki in vim<x16>
Plug 'vimwiki/vimwiki'

" Dynamic Latex Preview
Plug 'antoinix/dynatex', {'for': 'tex'}

call plug#end()


" ===
" === Customed Shortcuts Managing(Made by Antoine Lee)
" ===
" Due to the nesessary delay of shortcut judging, if you wanna keep working fluently on vim, you should know that:

" ➤  1. a(append)  i(insert)    o(new line)  r(replace)   v(visual mode)
"       s(swap)    p(paste)     y(copy)      f(find)      d(delete)
"       x(delete)  b(backward)  w(forward)   h(left)      l(right)
"       j(down)    k(up)        n(next)      /(command)   .(delete)
"       all of them are not suitable for customed shortcut combination because of delay of shortcut combination judging.

" ➤  2. c(change) can be used for it but pay attention to 'ci*','cw*'...

" ➤  3. z m q t g [ ] ; ' \ , are available.


" ===
" === vim-interestingwords<x0C>
" ===
let g:interestingWordsRandomiseColors = 1
let g:interestingWordsGUIColors = ['#8CCBEA', '#A4E57E', '#FFDB72', '#FF7272', '#FFB3FF', '#9999FF']
nnoremap <silent> <leader>k :call InterestingWords('n')<CR>
nnoremap <silent> <leader>K :call UncolorAllWords()<CR>
nnoremap <silent> n :call WordNavigation('forward')<CR>
nnoremap <silent> N :call WordNavigation('backward')<CR>


" ===
" === vim-bookmarks<x05>
" ===
let g:bookmark_sign = '⚑'
let g:bookmark_annotation_sign = ''
let g:bookmark_auto_save = 1
let g:bookmark_highlight_lines = 1
let g:bookmark_save_per_working_dir = 1
let g:bookmark_no_default_key_mappings = 1
function! BookmarkMapKeys()
  nnoremap mm :BookmarkToggle<CR>
  nnoremap mi :BookmarkAnnotate<CR>
  nnoremap mn :BookmarkNext<CR>
  nnoremap mp :BookmarkPrev<CR>
  nnoremap ma :BookmarkShowAll<CR>
  nnoremap mc :BookmarkClear<CR>
  nnoremap mx :BookmarkClearAll<CR>
  nnoremap mkk :BookmarkMoveUp
  nnoremap mjj :BookmarkMoveDown
endfunction
function! BookmarkUnmapKeys()
  unmap mm
  unmap mi
  unmap mn
  unmap mp
  unmap ma
  unmap mc
  unmap mx
  unmap mkk
  unmap mjj
endfunction
augroup mine | autocmd BufEnter * :call BookmarkMapKeys()
augroup mine | autocmd BufEnter NERD_tree_* :call BookmarkUnmapKeys()


" ===
" === tagbar<x1C>
" ===
" 'universal-ctags/ctags' is required
let g:tagbar_ctags_bin = '/usr/local/bin/exctags'
nnoremap tg :TagbarToggle<CR>


" ===
" === vim-airline<x02>
" ===
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline#extensions#tabline#formatter = 'default'
let g:airline_powerline_fonts = 1
noremap <c-j> :bp<CR>
noremap <c-J> :bn<CR>
noremap qq :Bdelete<CR>


" ===
" === vim-airline-themes<x03>
" ===
augroup mine | autocmd VimEnter * AirlineTheme dark
let g:lightline = {
      \     'active': {
      \     'left': [['mode', 'paste' ], ['readonly', 'filename', 'modified']],
      \     'right': [['lineinfo'], ['percent'], ['fileformat', 'fileencoding']]
      \     }
      \ }


" ===
" === indentLine<x0E>
" ===
let g:indentLine_color_gui = '#ED6824'
let g:indentLine_char_list = ['¦', '┆', '┊','╏','┇','┋','│','┃','║']


" ===
" === vim-rainbow<x1A>
" ===
augroup mine | autocmd FileType * call rainbow#load()
let g:rainbow_active = 1
let g:rainbow_load_separately = [
      \ [ '*' , [['(', ')'], ['\[', '\]'], ['{', '}']] ],
      \ [ '*.tex' , [['(', ')'], ['\[', '\]']] ],
      \ [ '*.cpp' , [['(', ')'], ['\[', '\]'], ['{', '}']] ],
      \ [ '*.{html,htm}' , [['(', ')'], ['\[', '\]'], ['{', '}'], ['<\a[^>]*>', '</[^>]*>']] ],
      \ ]
let g:rainbow_guifgs = ['RoyalBlue3', 'DarkOrange3', 'DarkOrchid3', 'FireBrick']
let g:rainbow_ctermfgs = ['lightblue', 'lightgreen', 'yellow', 'red', 'magenta']


" ===
" === ultisnips<x0A>
" ===
" Insert Mode / all files
let g:UltiSnipsExpandTrigger=';q'
let g:UltiSnipsJumpForwardTrigger=';w'
let g:UltiSnipsJumpBackwardTrigger=';e'


" ===
" === wildfire.vim<x09>
" ===
map <leader>n <Plug>(wildfire-fuel)
map <leader>m <Plug>(wildfire-water)
let g:wildfire_objects = {
      \'*' : ["i'", 'i"', 'i)', 'i]', 'i}', 'ip', 'it','i>'],
      \'html,xml' : ['at','it'],
      \}


" ===
" === markdown-preview.nvim<x15>
" ===
" 1. Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() } }
" 2. In China, remember to move the offline decompressed binary file into '/plugged/markdown-preview.nvim/app/bin'.
let g:mkdp_port = ''
let g:mkdp_open_ip = ''
let g:mkdp_auto_start = 0
let g:mkdp_auto_close = 1
let g:mkdp_browserfunc = ''
let g:mkdp_refresh_slow = 0
let g:mkdp_markdown_css = ''
let g:mkdp_highlight_css = ''
let g:mkdp_browser = 'chromium'
let g:mkdp_echo_preview_url = 0
let g:mkdp_open_to_the_world = 0
let g:mkdp_command_for_global = 0
let g:mkdp_page_title = '「${name}」'
let g:mkdp_preview_options = {
      \ 'mkit': {},
      \ 'katex': {},
      \ 'uml': {},
      \ 'maid': {},
      \ 'disable_sync_scroll': 0,
      \ 'sync_scroll_type': 'middle',
      \ 'hide_yaml_meta': 1,
      \ 'sequence_diagrams': {}
      \ }


" ===
" === vim-autoformat<x13>
" ===
" c/cpp : astyle
" python: autopep8 (pip3 is recommended)
noremap <c-d> :Autoformat<CR>:w<CR>
let g:autoformat_autoindent = 0
let g:autoformat_retab = 0
let g:autoformat_remove_trailing_spaces = 0
let g:formatters_python = ['autopep8']
let g:formatterpath = ['$HOME/.vim/astyle/build/gcc/bin']


" ===
" === ale<x14>
" ===
" vim   : vint (pip3 is recommended)
" c     : gcc (pacman is recommended)
" cpp   : gcc (pacman is recommended)
" html  : proselint (pip3 is recommended)
" xhtml : proselint (pip3 is recommended)
" css   : prettier (pacman is recommended)
" shell : shellcheck (pacman is recommended)
" python: pylint & autopep8 & yapf (pip3 is recommended)
" awk   : gawk (https://mirrors.tuna.tsinghua.edu.cn/gnu/gawk)
let g:ale_sign_error = '➤ '
let g:ale_sign_warning = '»»'
let g:ale_echo_msg_error_str = '☠ 謬'
let g:ale_echo_msg_warning_str = '💣殆'
let g:ale_echo_msg_format = '🔍%linter% %severity% 📋:%s'
let b:ale_linters = {
      \'asm': [],
      \'c': ['gcc'],
      \'vimwiki': [],
      \'cpp': ['gcc'],
      \'vim': ['vint'],
      \'awk': ['gawk'],
      \'css': ['prettier'],
      \'sh': ['shellcheck'],
      \'python': ['pylint'],
      \'xhtml': ['proselint'],
      \'html': ['proselint','prettier'],
      \}
let b:ale_fixers = {
      \'*': ['remove_trailing_lines', 'trim_whitespace'],
      \'python': ['autopep8', 'yapf'],
      \}
let g:ale_fix_on_save = 1
let g:ale_lint_on_insert_changed = 0
let g:ale_lint_on_text_changed = 'never'


" ===
" === nerdtree<x07>
" ===
augroup mine | autocmd StdinReadPre * let s:std_in=1
augroup mine | autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
nnoremap tt :NERDTreeToggle<CR>
let g:NERDTreeDirArrowExpandable = '➤ '
let g:NERDTreeDirArrowCollapsible = '●'
let NERDTreeMapOpenExpl = ''
let NERDTreeMapUpdir = ''
let NERDTreeMapUpdirKeepOpen = 'l'
let NERDTreeMapOpenSplit = ''
let NERDTreeOpenVSplit = ''
let NERDTreeMapActivateNode = 'i'
let NERDTreeMapOpenInTab = 'o'
let NERDTreeMapPreview = ''
let NERDTreeMapCloseDir = 'n'
let NERDTreeMapChangeRoot = 'y'


" ==
" == nerdtree-git-plugin<x0D>
" ==
let g:NERDTreeIndicatorMapCustom = {
      \ 'Modified'  : '',
      \ 'Staged'    : '◉',
      \ 'Untracked' : '!',
      \ 'Renamed'   : '',
      \ 'Unmerged'  : '',
      \ 'Deleted'   : 'x',
      \ 'Dirty'     : '➨ ',
      \ 'Clean'     : '♪',
      \ 'Ignored'   : '=',
      \ 'Unknown'   : '?'
      \ }


" ===
" === vimwiki<x16>
" ===
" set nocompatible & filetype plugin on & syntax on
let g:vimwiki_list = [{
  \ 'ext':'.md',
  \ 'syntax': 'markdown',
  \ 'automatic_nested_syntaxes':1,
\}]
nmap <leader>we <Plug>VimwikiSplitLink
nmap <leader>wq <Plug>VimwikiVSplitLInk


" ==
" == vim-multiple-cursors<x08>
" ==
let g:multi_cursor_use_default_mapping = 0
let g:multi_cursor_start_word_key      = '<c-k>'
let g:multi_cursor_next_key            = '<c-n>'
let g:multi_cursor_prev_key            = '<c-l>'
let g:multi_cursor_skip_key            = '<c-x>'
let g:multi_cursor_quit_key            = '<Esc>'


" ===
" === vim-which-key<x10>
" ===
let g:which_key_hspace = 7
let g:which_key_vertical = 0
let g:which_key_position = 'botright'
let g:which_key_map = {}
call which_key#register('<Space>','g:which_key_map')
nnoremap <leader>z :WhichKey<Space>''<Left>


" ===
" === vim-fugitive<x18>
" ===
nnoremap gs :Gstatus<CR>
nnoremap ge :Gedit<CR>
nnoremap gt :Gtabedit<CR>
nnoremap gh :Gvsplit<CR>
nnoremap gv :Gsplit<CR>
nnoremap gb :Gblame<CR>


" ===
" === vim-gitgutter<x17>
" ===
let g:gitgutter_map_keys = 0
let g:gitgutter_max_signs = 500
let g:gitgutter_sign_added = '◉◉'
let g:gitgutter_sign_modified = '=='
let g:gitgutter_sign_removed = 'xx'
let g:gitgutter_sign_removed_first_line = '➥ '
let g:gitgutter_sign_modified_removed = '☻☻'
nnoremap zf :GitGutterQuickFix<CR>
nmap zc <Plug>(GitGutterNextHunk)
nmap zx <Plug>(GitGutterPrevHunk)
nmap zs <Plug>(GitGutterStageHunk)
nmap zu <Plug>(GitGutterUndoHunk)
nmap zp <Plug>(GitGutterPreviewHunk)


" ===
" === vim-cpp-modern
" ===
let c_no_curly_error = 1
let g:cpp_posix_standard = 1
let g:cpp_simple_highlight = 0
let g:cpp_concepts_highlight = 1
let g:cpp_class_decl_highlight = 1
let g:cpp_no_function_highlight = 0
let g:cpp_class_scope_highlight = 1
let g:cpp_member_variable_highlight = 1
let g:cpp_named_requirements_highlight = 1
let g:cpp_experimental_template_highlight = 1
let g:cpp_experimental_simple_template_highlight = 1


" ===
" === ack.vim<x1D>
" ===
" required: the-silver-searcher
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif
nnoremap <leader>a :Ack<Space>


" ===
" === tabular<x1E>
" ===
nnoremap <leader>t :Tabularize<Space>/


" ===
" === ctrlp.vim<x04>
" ===
" <F5>  : refresh
" <Esc> : quit
" <c-t> : open the entry in a new tab
" <c-r> : switch to regexp mode.
" <c-z> : mark/unmark multiple files
" <c-o> : open the marked files
" <c-y> : create a new file and its parent directories.
" <c-d> : switch to filename only search instead of full path.
":diffthis      : run 'diffthis' on the first 4 files.
" <c-j> & <c-k> : navigate the result list.
" <c-f> & <c-b> : cycle between modes.
" <c-v> & <c-x> : open the selected entry in a new split.
" <c-n> & <c-p> : select the next/previous string in prompt's history.
set wildignore+=*/tmp/*,*.so,*.swp,*.zip
let gactrlp_working_path_mode = 'ra'
let gactrlp_switch_buffer = 'et'
let g:ctrlp_max_files=0
let g:ctrlp_mruf_max=450
let g:ctrlp_use_caching = 1
let g:ctrlp_max_height = 10
let g:ctrlp_clear_cache_on_exit = 1
let g:ctrlp_cache_dir = $HOME.'/.cache/ctrlp'
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)$',
  \ 'file': '\v\.(exe|so|dll)$',
  \ 'link': 'some_bad_symbolic_links',
  \ }
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']
let g:ctrlp_buftag_types = {'go' : '--language-force=go --golang-types=ftv'}
let g:ctrlp_map = '<c-p>'
noremap cp :CtrlP<Space>~/
noremap cc :help ctrlp-mappings<CR>


" ===
" === gruvbox
" ===
colorscheme gruvbox
set background=dark
" Transparent:
" highlight Normal guibg=NONE ctermbg=None


" ===
" === coc.nvim
" ===
let g:coc_global_extensions = [
            \'coc-marketplace',
            \'coc-sh',
            \'coc-python',
            \'coc-vimlsp',
            \'coc-clangd'
            \]


" ===
" === dynatex
" ===
let g:dynatex_previewer = 'zathura'
let g:dynatex_engine = 'pdflatex'


" ===
" === File Header
" ===
func FileHeader()

  if &filetype == 'sh'
    call setline(1,'#! /bin/bash')
  endif

  if &filetype == 'python'
    call setline(1,"'''<++>'''")
  endif

  if &filetype == 'perl'
      call setline(1, '#! /usr/bin/perl')
  endif

endfunc
autocmd BufNewFile * exec ":call FileHeader()"


" ===
" === Source
" ===
"== shortcut
source ~/.vim/shortcut.vim

"== information
source ~/.vim/information.vim
