"                     --Only For Manjaro
"                     --$HOME/.vim/vimrc
"                          --Antoine Lee
"                   --Mon Feb 3 CST 2020
"     --https://github.com/antoinix/.vim


" ===
" === Vim Plugins
" ===
" run PlugInstall to install plugins on the first use
if !empty(glob('~/.vim/autoload/plug.vim'))
    if empty(glob('~/.vim/plugged'))
        augroup mine | autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
    endif
endif


" ===
" === Clean Junk Files
" ===
" clean fucking .viminf*.tmp files
if !empty(glob('~/.viminfo.tmp'))
    augroup mine | autocmd VimEnter * silent :!rm ~/.viminf*.tmp
endif

" clean intermediate files
if !empty(glob('$PWD/*.log'))
    augroup mine | autocmd VimEnter * silent :!rm $PWD/*.log $PWD/*.aux
endif


" ===
" === Basic Setting
" ===
set encoding=utf-8

set langmenu=en_US.UTF-8

set nocompatible

set updatetime=1000

set timeoutlen=500

set autowrite

set autoread

set list

set textwidth=80

set tabstop=4

set expandtab

set autoindent

set shiftwidth=4

set softtabstop=4

set listchars=tab:▶\ ,trail:●

set cursorline

set number

set relativenumber

set wrap

set scrolloff=3

set ruler

set cmdheight=1

set laststatus=2

set autochdir

set formatoptions-=tc

set showcmd

set showmode

set wildmenu

set wildignore=log/**,node_modules/**,target/**,tmp/**,*.rbc

set wildmode=longest,list,full

set nobackup

set nowritebackup

set noswapfile

let mapleader=' '

let &t_SR = "\<Esc>]50;CursorShape=2\x7"

let &t_EI = "\<Esc>]50;CursorShape=0\x7"

syntax on

syntax enable

augroup mine | autocmd FocusLost * :wa

map <LEADER><LEADER> :w<CR>:e ~/.vim/vimrc<CR>

map <LEADER>r :w<CR>:source ~/.vim/vimrc<CR>

autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif


" ===
" === Searching
" ===
set hlsearch
set incsearch
set ignorecase
set smartcase
exec 'nohlsearch'
noremap <LEADER><CR> :nohlsearch<CR>


" ===
" === Window Spliting
" ===
set splitright
set splitbelow
nnoremap z\ :vs<CR>
nnoremap z- :sp<CR>
nnoremap t- :ter<CR>
nnoremap t\ :vert term<CR>
tnoremap <c-[> <c-w>:ter<CR>
tnoremap <c-\> <c-w>:vert term<CR>
nnoremap zj <c-w>j
nnoremap zk <c-w>k
nnoremap zh <c-w>h
nnoremap zl <c-w>l
nnoremap zq <c-w>c
nnoremap > <c-w>><c-w>><
nnoremap < <c-w><<c-w><<c-w><
nnoremap = <c-w>+<c-w>+<c-w>+
nnoremap - <c-w>-<c-w>-<c-w>-
nnoremap + <c-w>=


" ===
" === Code Folding
" ===
set foldmethod=manual
noremap zn zj
noremap zm zk
" zc : close the current fold
" zo : open the current fold
" zd : delete the current fold
" [z : move to the top of the current fold
" ]z : move to the bottom of the current fold
" zf : fold the selected area
" zfap : fold the whole paragraph
" zfnj / zfnk / zfgg / zfG


" ===
" === FileType
" ===
filetype on
filetype indent on
filetype plugin on
filetype plugin indent on
augroup mine | autocmd BufRead,BufNewFile *.m   set filetype=m
augroup mine | autocmd BufRead,BufNewFile *.srt set filetype=srt
augroup mine | autocmd BufRead,BufNewFile *.ass set filetype=ass
augroup mine | autocmd BufRead,BufNewFile *.eif set filetype=eif
augroup mine | autocmd BufRead,BufNewFile *.tex set filetype=tex


" ===
" === CompileRunGcc
" ===
map <F5> :call CompileRunGcc()<CR>
func! CompileRunGcc()
  exec 'w'
  if &filetype ==# 'sh'
    silent! exec '!clear'
    :!time bash %
  elseif &filetype ==# 'c'
    silent! exec '!clear'
    exec '!g++ % -o %<'
    exec '!time ./%<'
  elseif &filetype ==# 'cpp'
    silent! exec '!clear'
    exec '!g++ % -o %<'
    exec '!time ./%<'
  elseif &filetype ==# 'python'
    silent! exec '!clear'
    exec '!time python3 %'
  elseif &filetype ==# 'perl'
    silent! exec '!clear'
    exec '!time perl %'
  elseif &filetype ==# 'html'
    exec '!chromium % &'
  elseif &filetype ==# 'markdown'
    exec 'MarkdownPreview'
  elseif &filetype ==# 'vimwiki'
    exec 'MarkdownPreview'
  elseif &filetype ==# 'tex'
    exec 'DynatexStartPreview'
  endif
endfunc


" ===
" === Vim Plugins
" ===
call plug#begin('~/.vim/plugged')

" gruvbox vim theme
Plug 'morhetz/gruvbox'

" vim status bar dress
Plug 'vim-airline/vim-airline'

" airline theme
Plug 'vim-airline/vim-airline-themes'

" ---

" fuzzy finder
Plug 'junegunn/fzf'

" fuzzy finder for vim
Plug 'junegunn/fzf.vim'

" code finder
Plug 'mileszs/ack.vim'

" ---

" file tree in vim
Plug 'preservim/nerdtree'

" Status in Git tree
Plug 'Xuyuanp/nerdtree-git-plugin'

" Tag bar
Plug 'majutsushi/tagbar'

" Ctags
Plug 'universal-ctags/ctags'

" ---

" multiple cursors
Plug 'terryma/vim-multiple-cursors'

" cursor underline
Plug 'itchyny/vim-cursorword'

" highliht some words you like
Plug 'lfv89/vim-interestingwords'

" file superlink in vim
Plug 'amix/open_file_under_cursor.vim'

" easymotion
Plug 'easymotion/vim-easymotion'

" ---

" Quick choose
Plug 'gcmt/wildfire.vim'

" quoting processing
Plug 'tpope/vim-surround'

" ---

" Indent line
Plug 'Yggdroot/indentLine'

" Colorful Brackets
Plug 'frazrepo/vim-rainbow'

" ---

" python autoformat
Plug 'Chiel92/vim-autoformat'

" error check (python)
Plug 'dense-analysis/ale'

" coc.nvim
" Plug 'neoclide/coc.nvim', {'branch': 'release'}

" C & C++ highlight
Plug 'bfrg/vim-cpp-modern'

" ---

"markdown preview
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() } }

" wiki in vim
Plug 'vimwiki/vimwiki'

" Code snippet
Plug 'SirVer/ultisnips'

" ---

" vim bookmarks
Plug 'MattesGroeger/vim-bookmarks'

" vim home page
Plug 'mhinz/vim-startify'

" show Git status in side column
Plug 'airblade/vim-gitgutter'

" buffer close enhancement
Plug 'moll/vim-bbye'

call plug#end()


" ===
" === Mapping Note ( by Antoine Lee )
" ===
" Due to the inevitable delay of shortcut judging, if you wanna keep
" working fluently on vim, you should know that:

" ➤  1. a(append)  i(insert)    o(new line)  r(replace)   v(visual mode)
"       s(swap)    p(paste)     y(copy)      f(find)      d(delete)
"       x(delete)  b(backward)  w(forward)   h(left)      l(right)
"       j(down)    k(up)        n(next)      /(command)   .(delete)
"    All of them are not suitable for shortcut combination because of the
"    inevitable delay.

" ➤  2. c(change) can be used for mapping but pay attention to 'ci*','cw*'...

" ➤  3. q(quit) can be used for mapping but pay attention to 'ci*','cw*'...

" ➤  4. z m t g [ ] ; ' \ , are available for that.


" ===
" === vim-interestingwords
" ===
let g:interestingWordsRandomiseColors = 1
let g:interestingWordsGUIColors = ['#8CCBEA', '#A4E57E', '#FFDB72', '#FF7272', '#FFB3FF', '#9999FF']
nnoremap <silent> <leader>k :call InterestingWords('n')<CR>
nnoremap <silent> <leader>K :call UncolorAllWords()<CR>
nnoremap <silent> n :call WordNavigation('forward')<CR>
nnoremap <silent> N :call WordNavigation('backward')<CR>


" ===
" === vim-bookmarks
" ===
let g:bookmark_sign = '⚑'
let g:bookmark_annotation_sign = ''
let g:bookmark_auto_save = 1
let g:bookmark_highlight_lines = 1
let g:bookmark_save_per_working_dir = 1
let g:bookmark_no_default_key_mappings = 1
function! BookmarkMapKeys()
  nnoremap mm :BookmarkToggle<CR>
  nnoremap mi :BookmarkAnnotate<CR>
  nnoremap mn :BookmarkNext<CR>
  nnoremap mp :BookmarkPrev<CR>
  nnoremap ma :BookmarkShowAll<CR>
  nnoremap mc :BookmarkClear<CR>
  nnoremap mx :BookmarkClearAll<CR>
  nnoremap mkk :BookmarkMoveUp
  nnoremap mjj :BookmarkMoveDown
endfunction
function! BookmarkUnmapKeys()
  unmap mm
  unmap mi
  unmap mn
  unmap mp
  unmap ma
  unmap mc
  unmap mx
  unmap mkk
  unmap mjj
endfunction
augroup mine | autocmd BufEnter * :call BookmarkMapKeys()
augroup mine | autocmd BufEnter NERD_tree_* :call BookmarkUnmapKeys()


" ===
" === tagbar
" ===
" 'universal-ctags/ctags' is required
let g:tagbar_ctags_bin = '/usr/local/bin/exctags'
nnoremap tg :TagbarToggle<CR>


" ===
" === vim-airline
" ===
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline#extensions#tabline#formatter = 'default'
let g:airline_powerline_fonts = 1
noremap <c-j> :bp<CR>
noremap <c-J> :bn<CR>
noremap qq :Bdelete<CR>


" ===
" === vim-airline-themes
" ===
" AirLineTheme: dark soda luna
augroup mine | autocmd VimEnter * AirlineTheme soda
let g:lightline = {
      \     'active': {
      \     'left': [['mode', 'paste' ], ['readonly', 'filename', 'modified']],
      \     'right': [['lineinfo'], ['percent'], ['fileformat', 'fileencoding']]
      \     }
      \ }


" ===
" === indentLine
" ===
let g:indentLine_color_gui = '#ED6824'
let g:indentLine_char_list = ['¦', '┆', '┊','╏','┇','┋','│','┃','║']


" ===
" === vim-rainbow
" ===
augroup mine | autocmd FileType * call rainbow#load()
let g:rainbow_active = 1
let g:rainbow_load_separately = [
      \ [ '*' , [['(', ')'], ['\[', '\]'], ['{', '}']] ],
      \ [ '*.tex' , [['(', ')'], ['\[', '\]']] ],
      \ [ '*.cpp' , [['(', ')'], ['\[', '\]'], ['{', '}']] ],
      \ [ '*.{html,htm}' , [['(', ')'], ['\[', '\]'], ['{', '}'], ['<\a[^>]*>', '</[^>]*>']] ],
      \ ]
let g:rainbow_guifgs = ['RoyalBlue3', 'DarkOrange3', 'DarkOrchid3', 'FireBrick']
let g:rainbow_ctermfgs = ['lightblue', 'lightgreen', 'yellow', 'red', 'magenta']


" ===
" === ultisnips
" ===
" Insert Mode / all files
let g:UltiSnipsExpandTrigger=';q'
let g:UltiSnipsJumpForwardTrigger=';w'
let g:UltiSnipsJumpBackwardTrigger=';e'


" ===
" === wildfire.vim
" ===
map <leader>n <Plug>(wildfire-fuel)
map <leader>m <Plug>(wildfire-water)
let g:wildfire_objects = {
      \'*' : ["i'", 'i"', 'i)', 'i]', 'i}', 'ip', 'it','i>'],
      \'html,xml' : ['at','it'],
      \}


" ===
" === markdown-preview.nvim
" ===
" 1. Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() } }
" 2. If the installation fails, move the offline binary file to /plugged/markdown-preview.nvim/app/bin.
let g:mkdp_port = ''
let g:mkdp_open_ip = ''
let g:mkdp_auto_start = 0
let g:mkdp_auto_close = 1
let g:mkdp_browserfunc = ''
let g:mkdp_refresh_slow = 0
let g:mkdp_markdown_css = ''
let g:mkdp_highlight_css = ''
let g:mkdp_browser = 'chromium'
let g:mkdp_echo_preview_url = 0
let g:mkdp_open_to_the_world = 0
let g:mkdp_command_for_global = 0
let g:mkdp_page_title = '「${name}」'
let g:mkdp_preview_options = {
      \ 'mkit': {},
      \ 'katex': {},
      \ 'uml': {},
      \ 'maid': {},
      \ 'disable_sync_scroll': 0,
      \ 'sync_scroll_type': 'middle',
      \ 'hide_yaml_meta': 1,
      \ 'sequence_diagrams': {}
      \ }


" ===
" === vim-autoformat
" ===
" c/cpp : astyle
" python: autopep8 (pip3 is recommended)
noremap <c-d> :Autoformat<CR>:w<CR>
let g:autoformat_autoindent = 0
let g:autoformat_retab = 0
let g:autoformat_remove_trailing_spaces = 0
let g:formatters_python = ['autopep8']
let g:formatterpath = ['$HOME/.vim/astyle/build/gcc/bin']


" ===
" === ale
" ===
" vim   : vint (pip3 is recommended)
" c     : gcc (pacman is recommended)
" cpp   : gcc (pacman is recommended)
" html  : proselint (pip3 is recommended)
" xhtml : proselint (pip3 is recommended)
" css   : prettier (pacman is recommended)
" shell : shellcheck (pacman is recommended)
" python: pylint & autopep8 & yapf (pip3 is recommended)
" awk   : gawk (https://mirrors.tuna.tsinghua.edu.cn/gnu/gawk)
let g:ale_sign_error = '➤ '
let g:ale_sign_warning = '»»'
let g:ale_echo_msg_error_str = '☠ 謬'
let g:ale_echo_msg_warning_str = '💣殆'
let g:ale_echo_msg_format = '🔍%linter% %severity% 📋:%s'
let b:ale_linters = {
      \'asm': [],
      \'c': ['gcc'],
      \'vimwiki': [],
      \'cpp': ['gcc'],
      \'vim': ['vint'],
      \'awk': ['gawk'],
      \'css': ['prettier'],
      \'sh': ['shellcheck'],
      \'python': ['pylint'],
      \'xhtml': ['proselint'],
      \'html': ['proselint','prettier'],
      \}
let b:ale_fixers = {
      \'*': ['remove_trailing_lines', 'trim_whitespace'],
      \'python': ['autopep8', 'yapf'],
      \}
let g:ale_fix_on_save = 1
let g:ale_lint_on_insert_changed = 0
let g:ale_lint_on_text_changed = 'never'


" ===
" === nerdtree
" ===
augroup mine | autocmd StdinReadPre * let s:std_in=1
augroup mine | autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
nnoremap tt :NERDTreeToggle<CR>
let g:NERDTreeDirArrowExpandable = '➤ '
let g:NERDTreeDirArrowCollapsible = '●'
let NERDTreeMapOpenExpl = ''
let NERDTreeMapUpdir = ''
let NERDTreeMapUpdirKeepOpen = 'l'
let NERDTreeMapOpenSplit = ''
let NERDTreeOpenVSplit = ''
let NERDTreeMapActivateNode = 'i'
let NERDTreeMapOpenInTab = 'o'
let NERDTreeMapPreview = ''
let NERDTreeMapCloseDir = 'n'
let NERDTreeMapChangeRoot = 'y'


" ==
" == nerdtree-git-plugin
" ==
let g:NERDTreeIndicatorMapCustom = {
      \ 'Modified'  : '',
      \ 'Staged'    : '◉',
      \ 'Untracked' : '!',
      \ 'Renamed'   : '',
      \ 'Unmerged'  : '',
      \ 'Deleted'   : 'x',
      \ 'Dirty'     : '➨ ',
      \ 'Clean'     : '♪',
      \ 'Ignored'   : '=',
      \ 'Unknown'   : '?'
      \ }


" ===
" === vimwiki
" ===
" set nocompatible & filetype plugin on & syntax on
let g:vimwiki_list = [{
  \ 'ext':'.md',
  \ 'syntax': 'markdown',
  \ 'automatic_nested_syntaxes':1,
\}]
nmap <leader>we <Plug>VimwikiSplitLink
nmap <leader>wq <Plug>VimwikiVSplitLInk


" ==
" == vim-multiple-cursors
" ==
let g:multi_cursor_use_default_mapping = 0
let g:multi_cursor_start_word_key      = '<c-k>'
let g:multi_cursor_next_key            = '<c-n>'
let g:multi_cursor_prev_key            = '<c-l>'
let g:multi_cursor_skip_key            = '<c-x>'
let g:multi_cursor_quit_key            = '<Esc>'


" ===
" === vim-gitgutter
" ===
let g:gitgutter_map_keys = 0
let g:gitgutter_max_signs = 500
let g:gitgutter_sign_added = '◉◉'
let g:gitgutter_sign_modified = '=='
let g:gitgutter_sign_removed = 'xx'
let g:gitgutter_sign_removed_first_line = '➥ '
let g:gitgutter_sign_modified_removed = '☻☻'


" ===
" === vim-cpp-modern
" ===
let c_no_curly_error = 1
let g:cpp_posix_standard = 1
let g:cpp_simple_highlight = 0
let g:cpp_concepts_highlight = 1
let g:cpp_class_decl_highlight = 1
let g:cpp_no_function_highlight = 0
let g:cpp_class_scope_highlight = 1
let g:cpp_member_variable_highlight = 1
let g:cpp_named_requirements_highlight = 1
let g:cpp_experimental_template_highlight = 1
let g:cpp_experimental_simple_template_highlight = 1


" ===
" === ack.vim
" ===
" required: the-silver-searcher
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif
nnoremap <leader>a :Ack<Space>


" ===
" === gruvbox
" ===
colorscheme gruvbox
set background=dark
" Transparent:
" highlight Normal guibg=NONE ctermbg=None


" ===
" === coc.nvim
" ===
let g:coc_global_extensions = [
            \'coc-marketplace',
            \'coc-sh',
            \'coc-python',
            \'coc-vimlsp',
            \'coc-clangd'
            \]


" ===
" === vim-easymotion
" ===
let g:EasyMotion_smartcase = 1
nmap gw <Plug>(easymotion-s2)
nmap gl <Plug>(easymotion-overwin-line)
nmap gn <Plug>(easymotion-next)
nmap gm <Plug>(easymotion-prev)


" ===
" === fzf.vim
" ===
cnoreabbrev b Buffers
cnoreabbrev f Files .
cnoreabbrev g GFiles
cnoreabbrev win Windows
cnoreabbrev his History
cnoreabbrev fh Files $HOME


" ===
" === File Header
" ===
func FileHeader()

  if &filetype == 'sh'
    call setline(1,'#! /bin/bash')
  endif

  if &filetype == 'python'
    call setline(1,"''''''")
  endif

  if &filetype == 'perl'
      call setline(1, '#! /usr/bin/perl')
  endif

endfunc
autocmd BufNewFile * exec ":call FileHeader()"


" ===
" === Source
" ===
"== shortcut
source ~/.vim/shortcut.vim

"== information
source ~/.vim/information.vim
